# Common healthcheck configuration
# x-backend-common: &backend-common
#   deploy:
#     resources:
#       limits:
#         cpus: '1'
#         memory: 1G
#       reservations:
#         cpus: '0.25'
#         memory: 256M
#   healthcheck:
#     test: ["CMD", "wget", "-q", "--spider", "http://localhost:5100/health"]
#     interval: 30s
#     timeout: 10s
#     retries: 5
#     start_period: 60s

# Base configuration for all backend services
x-backend-base: &backend-base
  image: ${BACKEND_IMAGE}
  restart: unless-stopped
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    redis: { condition: service_healthy }
  networks:
    - traefik-network
  # <<: *backend-common
  env_file:
    - ../config/backend/api.env

# Configuration for services that need database migration
x-backend-migration: &backend-migration
  <<: *backend-base
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    redis: { condition: service_healthy }

# Configuration for services that need database to be ready
x-backend-ready: &backend-ready
  <<: *backend-migration
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    redis: { condition: service_healthy }
    seed: { condition: service_completed_successfully }

# Configuration for public-facing services
x-backend-public: &backend-public
  <<: *backend-ready
  depends_on:
    ipfs: { condition: service_healthy }
    postgres: { condition: service_healthy }
    redis: { condition: service_healthy }
    seed: { condition: service_completed_successfully }
    traefik: { condition: service_started }
  networks:
    - traefik-network

services:
  # Database migration service
  migration:
    <<: *backend-base
    command: node app/cmd/cmd.js migrate
    restart: on-failure
    environment:
      OTEL_SERVICE_NAME: pfc-migration
    labels:
      - traefik.enable=false

  # Database seeding service
  seed:
    <<: *backend-migration
    command: node app/cmd/cmd.js seed-production
    restart: on-failure
    depends_on:
      migration: { condition: service_completed_successfully }
    environment:
      OTEL_SERVICE_NAME: pfc-seed
    labels:
      - traefik.enable=false

  # API service with high availability
  api:
    <<: *backend-public
    command: node app/cmd/cmd.js api
    deploy:
      replicas: ${API_REPLICAS}
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      OTEL_SERVICE_NAME: pfc-api
    labels:
      - traefik.enable=true
      - traefik.http.routers.pfc-api.rule=Host(`${API_DOMAIN}`)
      - traefik.http.routers.pfc-api.entrypoints=websecure
      - traefik.http.services.pfc-api.loadbalancer.server.port=5100
      - traefik.http.routers.pfc-api.tls=true
      - traefik.http.routers.pfc-api.tls.certresolver=letsencrypt
      # Security and rate limiting
      - traefik.http.routers.pfc-api.middlewares=api-ratelimit,api-security,api-cors
      - traefik.http.middlewares.api-ratelimit.ratelimit.average=100
      - traefik.http.middlewares.api-ratelimit.ratelimit.burst=50
      - traefik.http.middlewares.api-ratelimit.ratelimit.period=1m
      # Security headers
      - traefik.http.middlewares.api-security.headers.stsSeconds=31536000
      - traefik.http.middlewares.api-security.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.api-security.headers.contentTypeNosniff=true
      - traefik.http.middlewares.api-security.headers.browserXssFilter=true
      - traefik.http.middlewares.api-security.headers.referrerPolicy=strict-origin-when-cross-origin
      # CORS Configuration
      - traefik.http.middlewares.api-cors.headers.accessControlAllowMethods=GET,OPTIONS,PUT,POST,DELETE
      - traefik.http.middlewares.api-cors.headers.accessControlAllowOriginList=${API_ALLOWED_ORIGINS}
      - traefik.http.middlewares.api-cors.headers.accessControlAllowHeaders=Content-Type,Authorization,X-Requested-With
      - traefik.http.middlewares.api-cors.headers.accessControlMaxAge=100
      - traefik.http.middlewares.api-cors.headers.addVaryHeader=true

  # Bot service
  bot:
    <<: *backend-ready
    command: node app/cmd/cmd.js bot
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-bot
    labels:
      - traefik.enable=false

  # Chart service
  chart:
    <<: *backend-ready
    command: node app/cmd/cmd.js chart
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-chart
    labels:
      - traefik.enable=false

  # Graduation service
  graduation:
    <<: *backend-ready
    command: node app/cmd/cmd.js graduation
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-graduation
    labels:
      - traefik.enable=false

  # Indexer service
  indexer:
    <<: *backend-ready
    command: node app/cmd/cmd.js indexer
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-indexer
    labels:
      - traefik.enable=false

  # Solana indexer service
  indexer-of-solana:
    <<: *backend-ready
    command: node app/cmd/cmd.js indexer-of-solana
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-indexer-of-solana
    labels:
      - traefik.enable=false

  # Interval service
  interval:
    <<: *backend-ready
    command: node app/cmd/cmd.js interval
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-interval
    labels:
      - traefik.enable=false

  # Trade service
  trade:
    <<: *backend-ready
    command: node app/cmd/cmd.js trade
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-trade
    labels:
      - traefik.enable=false

  # Withdrawal service
  withdrawal:
    <<: *backend-ready
    command: node app/cmd/cmd.js withdrawal
    deploy:
      replicas: ${SERVICE_REPLICAS}
      update_config:
        parallelism: 1
        order: start-first
    environment:
      OTEL_SERVICE_NAME: pfc-withdrawal
    labels:
      - traefik.enable=false

networks:
  traefik-network:
    external: true
